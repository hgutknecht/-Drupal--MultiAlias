<?php

module_load_include('inc', 'pathauto', 'pathauto');

/**
 * @HJG
 * Permissions for the Multialias Module
 * Implementation of hook_perm()
 *
 * To use this if (user_access('admin multialias url aliases')) {} and (user_access('create multialias url aliases')) {}
 *
 **/
function multialias_perm() {
  return array('admin multialias url aliases','create multialias url aliases');
}

/*
* @LSU_JBOB
* _multialias_get_number_of_patterns_per_content_type
* return number of multialiases stored based on content type
*/
function _multialias_get_number_of_patterns_per_content_type($content_type) {
  $variable_name = "multialias_node_" . $content_type . "_pattern";
  $results = array();
  $sql = "SELECT count(name) as total FROM {multialias_variable} WHERE name LIKE '%" . $variable_name . "%'";
  $results = db_fetch_array(db_query($sql));
  return ($results['total']);
}

/*
 * LSU_JBob
 * multialias_get_patterns
 * returns all available multialias patterns for a given content type
 */
function multialias_get_patterns($content_type) {
   	$num_of_patterns = _multialias_get_number_of_patterns_per_content_type($content_type);

   	$results_to_return = array();

   	for ($i=0; $i < $num_of_patterns; $i++) {
   	  array_push($results_to_return, multialias_variable_get("multialias_node_" . $content_type . "_pattern_" . $i));
   	}

   	return $results_to_return;
}

/*
* @LSU_JBOB
* multialias_nodeapi
* Creates the Aliases in the database when the node is saved
*/
function multialias_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  //Only run if pathauto auto-aliasing is enabled
  if ($node->pathauto_perform_alias = 1) {
    switch($op) {
      case 'insert':
	    multialias_create_multialiases($node);
	  break;

	  case 'update':
	    $node->pathauto_perform_alias = 0;
	    multialias_create_multialiases($node);
	    $node->pathauto_perform_alias = 1;
	  break;

      default:
      break;
    }
  }
}

/**
 * @LSU_JBob
 * multialias_create_multialiases
 * This function
**/
function multialias_create_multialiases($node) {
  $num_of_aliases = _multialias_get_number_of_patterns_per_content_type($node->type);
  
  for ($i=0; $i < $num_of_aliases; $i++) {
    $pattern = multialias_variable_get("multialias_node_" . $node->type . "_pattern_" . $i);
    $default_node_path = "node/" . $node->nid;
    $new_alias = $pattern;

    $placeholders = pathauto_get_placeholders('node', $node);

    foreach($placeholders['tokens'] as $token_index => $token_name) {
      if (strpos($pattern, $token_name) > 0){
        $new_alias = str_replace($token_name, $placeholders['values'][str_replace(']','', str_replace('[', '',$token_name))], $pattern);
      }
    }

	//Check if the new alias exists
    $result = _multialias_get_path_record($default_node_path, $new_alias);
    
    //If doesn't exist create new, else update it
    if (!$result) {
      path_set_alias($default_node_path, $new_alias, 0, '');
    }
    else {
      path_set_alias($default_node_path, $new_alias, $result['pid'], '');
    }
      
    //Report back to user
    drupal_set_message("MULTIALIAS: " . $node->title . " resolves at the default node path: <a href='/node/$node->nid'>node/$node->nid</a><br/>An alias has been created for this node that resolves at <a href='/$new_alias'>$new_alias</a>");

  }
}

/**
 * @LSU_JBob
 * _get_path_record
 * This is a small helper function I created to return the raw row object for a given source
 * destination objects.
 *
 * @param $node_path: The default node path of the node in question ie "node/195"
 * @param $alias: The alias to check if it exists
 * returns an array or null object if no results
 **/
function _multialias_get_path_record($node_path, $alias) {

 $results = array();
 $results = db_fetch_array(db_query("SELECT * FROM {url_alias} WHERE src = '%s' and dst = '%s'", $node_path, $alias));
 return $results;
}

/**
 * Implementation of hook_menu().
 *
 * Hook menu registers page callbacks with Drupal's central menu system.
 * Generate MultiAlias setting menu
 *
 */
function multialias_menu() {
  $items = array();

  $items['admin/build/path/multialias'] = array(
    'title' => 'Multialias',
    'description' => 'Configuration options for the multialias module',
    'page callback' => 'multialias_admin_settings',
    'access callback' => 'user_access', // TRUE will give access to everyone
    'access arguments' => array('admin multialias url aliases'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  return $items;
}

/**
 * Page callback function for admin/settings/multialias.
 */
function multialias_admin_settings() {
  return drupal_get_form('multialias_settings_form');
}

/**
 * Form builder function for multialias_settings_form.
 */
function multialias_settings_form() {
  $form = array();
  $form['multialias_nodes'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('MultiAlias Node Paths'),
	  '#tree' => TRUE,
	  '#collapsed' => 0,
	  '#collapsible' => 0
	);
  //Loop through each content type
  foreach (node_get_types('names') as $node_type => $node_name) {
  	  //get the current pathauto pattern for the content type
  	  $node_pathauto_pattern = variable_get("pathauto_node_" . $node_type . "_pattern", NULL);

  	  if(!$node_pathauto_pattern){
  	    $node_pathauto_pattern = variable_get("pathauto_node_pattern", NULL);
  	  }

  	  //Load the node aliases
  	  $multialias_variable_name = 'multialias_node_' . $node_type . '_pattern';
  	  $num_of_patterns = _multialias_get_number_of_patterns_per_content_type($node_type);
  	  $multialias_node_patterns = '';
  	  if($num_of_patterns == 1){
  	  	$multialias_node_patterns = multialias_variable_get($multialias_variable_name . '_0');
  	  }
  	  if($num_of_patterns > 1){
  	      for($i=0; $i < $num_of_patterns; $i++) {
  	  	  	$multialias_node_patterns .= multialias_variable_get($multialias_variable_name . "_" . $i);
  	      }
  	    }
      
      //Make a variable to collapse the section if nothing is returned from the
      //database
      $field_collapsed = ($multialias_node_patterns) ? FALSE : TRUE;
      
  	  //Build the form
	  $form['multialias_nodes'][$node_type] = array(
	    '#type' => 'fieldset',
      '#title' => t(ucfirst($node_type) .' multialias settings'),
  		'#weight' => -1,
  		'#collapsible' => TRUE,
    	'#collapsed' => $field_collapsed,
	  );
  	$form['multialias_nodes'][$node_type][$node_type . '_multialias_field'] = array(
	  	'#description' => 'test',
	      0 => array(
	    '#type' => 'textfield',
	    '#title' => 'Current pattern for all ' . $node_type . ' paths (set in Pathauto)',
	    '#description' => 'To edit the current default pattern go to <a href="/admin/build/path/pathauto">/admin/build/path/pathauto</a>',
	    '#value' => $node_pathauto_pattern,
	    '#disabled' => 1,
	    ),
  	  );
	  $form['multialias_nodes'][$node_type][$node_type . '_stalker_threshold'] = array(
	    '#type' => 'textarea',
	    '#title' => t('Multialiases - one per line please'),
	    '#description' => t('Enter in as many aliases as you like one per line you can use the replacement pattens below'),
	    '#default_value' => '',
	    '#value' => $multialias_node_patterns,
	    '#required' => FALSE,
	  );
  }
  // dsm($form);
	// TODO - fill in the replacement patterns available
	$form['multialias_nodes']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Use -raw replacements for text to avoid problems with HTML entities.'),
  );

  // Load token replacement patterns for nodes
  $patterns = token_get_list('node');
  $multialias_tokens = array();
  $token_type = 'node';
  foreach ($patterns as $type => $pattern_set) {
    if ($type != 'global') {
      foreach ($pattern_set as $pattern => $description) {
        $multialias_tokens['placeholders']['['. $pattern .']'] = $description;
      }
    }
  }
  //dsm($multialias_tokens);
  // Use the token tree if available.
  $doc = theme('token_tree', array($token_type), FALSE);
  if (empty($doc)) {
    $doc = "<dl>\n";
    foreach ($multialias_tokens->placeholders as $name => $description) {
      $doc .= '<dt>'. $name .'</dt>';
      $doc .= '<dd>'. $description .'</dd>';
    }
    $doc .= "</dl>\n";
  }
  // Print out toekn help
  $form['multialias_nodes']['token_help']['help'] = array(
    '#type' => 'markup',
    '#value' => $doc,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Validation function for multialias_admin_settings.
 */
function multialias_settings_form_validate(&$form, &$form_state) {
  //TODO: FORM VALIDATION !!!!!!
}

/**
 * Submission function for multialias_admin_settings.
 */
function multialias_settings_form_submit(&$form, &$form_state) {
  //Delete all the old patterns to make way for the new
  db_query("DELETE from {multialias_variable}");
  
  //Iternate through each submitted textfield
  foreach($form['multialias_nodes']['#post']['multialias_nodes'] as $node_type => $keyvalue_pair) {
    
    //create the multialias variable name
    $multialias_variable_name =  $node_type;
    $multialias_variable_name = 'multialias_node_' . $multialias_variable_name . '_pattern';

    //Iterate thru each multialias and set it's variable
    if ($keyvalue_pair[$node_type . '_stalker_threshold'] != '') {
      $new_patterns = array();
      $new_patterns = explode("\n", $keyvalue_pair[$node_type . '_stalker_threshold']);
      foreach($new_patterns as $pattern_index => $new_pattern) {
        $individual_variable_name = $multialias_variable_name . '_' . $pattern_index;
        multialias_variable_set($individual_variable_name, $new_pattern);
      }
    }
  }
  drupal_set_message("Multialias settings saved.");
}

/**
 * @LSU_JBOB
 * multialias_variable_set
 * sets multialias variables just like variable_set does
 * this function is a direct copy/paste from variable_set
 */

function multialias_variable_set($name, $value) {
  global $conf;

  $serialized_value = serialize($value);
  db_query("UPDATE {multialias_variable} SET value = '%s' WHERE name = '%s'", $serialized_value, $name);
  if (!db_affected_rows()) {
    @db_query("INSERT INTO {multialias_variable} (name, value) VALUES ('%s', '%s')", $name, $serialized_value);
  }

  $conf[$name] = $value;
}

/**
 * @LSU_JBOB
 * multialias_variable_get
 * Need this to pull custom patterns out of the custom DB table this module creates
 */
function multialias_variable_get($name) {
  $results = array();
  $results = db_fetch_array(db_query("SELECT name, value FROM {multialias_variable} WHERE name = '%s'", $name));
  return unserialize($results['value']);
}
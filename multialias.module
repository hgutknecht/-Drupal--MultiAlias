<?php
  
module_load_include('inc', 'pathauto', 'pathauto');
/**
 * Implementation of hook_nodeapi
 *
 *
 */
 
//function multialias_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
//  // TODO for contrib module - rewrite this to get node type and alias paths from module admin settings
//  // Only do this for product nodes - Hans: Added press releases
//	if ($node->type == 'product' || $node->type == 'page_brand' || $node->type == 'press_release') {
//	  
//		switch($op) {
//		
//		case 'prepare':
//			$node->pathauto_perform_alias = 0;
//		break;
//	    
//	  case 'insert':
//	    _create_practitioner_url($node);
//      /* watchdog('cv_insert', $op); */
//	  break;
//	    
//	  case 'update':
//	    _create_practitioner_url($node);
//      /* watchdog('cv_update', $op); */
//	  break;
//	    
//	  case 'view':
//	    // For debugging purposes
//      /* _create_practitioner_url($node); */
//	  break;
//	    
//		default:
//		break;
//		
//		}
//	}
//	
//	return;
//}

/**
* _create_practitioner_url
* @param mixed $node
* @access public
* @return void
*/

//function _create_practitioner_url($node) {
//  
//  //Create the titles to perform lookup on
//	$clean_url_title = pathauto_cleanstring($node->title);
//	
//	if ($node->type == 'press_release') {
//	  $product_url = "about-us/pressrelease/" . $clean_url_title;
//    $practitioner_url = "practitioner/about-us/pressrelease/" . $clean_url_title;
//	}
//	else {
//	  $product_url = "contact-lens/" . $clean_url_title;
//    $practitioner_url = "practitioner/contact-lens/" . $clean_url_title;
//	}
//	$default_node_path = "node/" . $node->nid;
//  
//  //Disbale Automatic Aliasing
//  if (isset($node->pathauto_perform_alias)) {
//			$node->pathauto_perform_alias = 0;
//	}
//	    
//	//If the Alias already exists place their db row arrays in these objects
//  //otherwise, they will be null
//  $product_result = _get_path_record($default_node_path, $product_url);
//  $practitioner_result = _get_path_record($default_node_path, $practitioner_url);
//  
//  //If null, make a new one, if exists, replace the existing one
//  //All handled by path_set_alias
//  if(!$product_result) {
//  	path_set_alias($default_node_path, $product_url, 0, '');
//  }
//  else {
//  	path_set_alias($default_node_path, $product_url, $product_result['pid'], '');
//  }
//  
//  if(!$practitioner_result) {
//  	path_set_alias($default_node_path, $practitioner_url, 0, '');
//  }
//  else {
//  	path_set_alias($default_node_path, $practitioner_url, $practitioner_result['pid'], '');
//  }
//  
//  //Success
//  $type;
//  
//  switch($node->type) {
//    
//  	case 'press_release':
//  	$type = 'Press Release';
//  	break;
//  	
//  	case 'product':
//  	$type = 'Product';
//  	break;
//  	
//  	case 'page_brand':
//  	$type = 'Brand';
//  	break;
//  	
//  	default:
//  	$type = 'Product';
//  	break;
//  }
//	    
//	drupal_set_message("Saved " . $type . ": " . $node->title . " <br/> The default node path for this " . strtolower($type) . " <a href='/" . $default_node_path ."'>" . $default_node_path . "</a> is aliased by the " . $type . " URL <a href='/". $product_url ."'>" . $product_url . "</a> and the Practitioner URL <a href='/" . $practitioner_url . "'>". $practitioner_url ."</a>");
//	
//	return;
//}


/**
 * multialias_form_alter 
 * 
 * @param mixed $form 
 * @param mixed $form_state 
 * @param mixed $form_id 
 * @access public
 * @return void
 */
//function multialias_form_alter(&$form, &$form_state, $form_id) {
//  
//	if ($form_id == 'product_node_form' || $form_id == 'page_brand_node_form' || $form_id == 'press_release_node_form') {
//		unset($form['path']['path']['#default_value']);
//    /*  $form['path'] */
//    /*  print_r($form['path']['path']['#description']); */
//		//  only alter the form if we're in edit mode
//		
//		if (arg(1) == 'add' || arg(2) == 'edit') {
//			//Hide the auto alias form
//			drupal_add_js("$(document).ready(function(){\$('#edit-pathauto-perform-alias-wrapper').parent().parent().remove();});", "inline");
//		}
//		
//		if (arg(2) == 'edit') {
//		     
//			//setup our node object from the form
//			$node = $form['#node'];
//	
//			//get all of the product alias for this product
//			$query = db_query("SELECT pid, dst FROM url_alias WHERE src = 'node/".$node->nid."'");
//	  	$form['cv_product'] = array(
//	    	'#type' => 'fieldset',
//	    	'#title' => t('Current Aliases'),
//	    	'#tree' => TRUE,
//	  	);
//	
//			$count = 0;
//			while($row = db_fetch_object($query)) {
//	
//				//custom delete button for this product alias
//				//Notice the display:none style, I am hiding this for now until the client
//				//realizes they need it - JRW
//				$description = '
//					<label class="option" style="display:none;" for="edit-delete-alias-'.$row->pid.'">
//					<input type="checkbox" name="delete_alias[]" id="edit-delete-alias-'.$row->pid.'"	value="'.$row->pid.'"   class="form-checkbox" /> Delete Product	Alias
//					</label>';
//	
//				$form['cv_product']['product_aliases_'.$row->pid] = array(
//	    		'#type' => 'textfield',
//	    		'#title' => '',
//					'#default_value' => $row->dst,
//	    		'#attributes' => array('disabled' => 'disabled'),
//					'#description' => $description,
//	  		);
//
//				$count++;
//			}
//	
//			//see if we have any product aliases if so inject our submit handler
//			if($count > 0) {
//			//Disabled the delete submit handler, will turn it on when client asks for it - JRW
///* 				$form['#submit'][] = 'cv_product_url_helper_submit_handler'; */
//			}
//	
//		}
//	}
//
//}

/**
 * multialiasr_submit_handler 
 * 
 * @param mixed $form 
 * @param mixed $form_state 
 * @access public
 * @return void
 */
//function multialias_submit_handler($form, &$form_state) {
//
//	if (isset($form_state['clicked_button']['#post']['delete_alias'])) {
//		$node = $form['#node'];
//
//		foreach ($form_state['clicked_button']['#post']['delete_alias'] as $alias) {
//			$alias_path = db_fetch_object(db_query("SELECT dst FROM {url_alias} WHERE pid = %d", $alias));
//
//			$sql = "DELETE FROM {url_alias} WHERE pid = %d";
//			//db_query($sql, $alias);
//			//drupal_set_message('Product Alias ['.$alias_path->dst.'] was deleted.');
//			drupal_set_message('Product Alias <em>['.$node->nid.'] for ' .$node->title. '</em> was deleted.');
//		}
//	}
//}


/**
 * @HJG
 * Permissions for the Multialias Module
 * Implementation of hook_perm()
 *
 * To use this if (user_access('admin multialias url aliases')) {} and (user_access('create multialias url aliases')) {}
 *
 **/
function multialias_perm() {
  return array('admin multialias url aliases','create multialias url aliases');
}

/**
 * _get_path_record
 * This is a small helper function I created to return the raw row object for a given source
 * destination objects.
 * 
 * @param $node_path: The default node path of the node in question ie "node/195"
 * @param $alias: The alias to check if it exists
 * returns an array or null object if no results
 **/
function _get_path_record($node_path, $alias) {
 $results = array();
 $results = db_fetch_array(db_query("SELECT * FROM {url_alias} WHERE src = '%s' and dst = '%s'", $node_path, $alias));
 return $results;
}

/*
* @JRW
* _multialias_create_pattern
* create a pattern in the variable table like pathauto does.
* create multialias variables for node paths
*/
function _multialias_create_pattern($multialias_variable_name, $pattern) {
  //Set the variable
  variable_set($multialias_variable_name, $pattern);
  return;
}

/*
* @JRW
* _multialias_get_number_of_multialiases_per_content_type
* return number of multialiases stored based on content type
*/
function _multialias_get_number_of_multialiases_per_content_type($content_type) {
  $variable_name = "multialias_node_" . $content_type . "_pattern";
  $results = array();
  $results = db_fetch_array(db_query("SELECT * FROM {variable} WHERE name LIKE '\%%s\%'", $variable_name));
  return count($results);
}

/*
* @JRW
* multialias_form_alter 
* implementation of hook_form_alter to change the auto-generated aliases form
*/
//function multialias_form_alter(&$form, &$form_state, $form_id) {
//  //Execute only on the pathauto admin settings screen
//  //TODO: Give this fieldset a weight of 3 so it appears after NODE PATHS in the form
//  if($form_id == "pathauto_admin_settings") {
//    $form['multialias_nodes'] = array(
//	  '#type' => 'fieldset',
//	  '#title' => t('MultiAlias Node Paths'),
//	  '#tree' => TRUE,
//	  '#collapsed' => 1,
//	  '#collapsible' => 1
//	);
//	foreach (node_get_types('names') as $node_type => $node_name) {
//	  // dsm($node_type);
//	  // $form['multialias_nodes'] = t('Pattern for all @node_type paths', array('@node_type' => $node_name));
//	  
//	  $form['multialias_nodes'][$node_type . '_multialias_field'] = array(
//	  '#description' => 'test',
//	  0 => array(
//	    '#type' => 'textfield',
//	    '#title' => 'Current pattern for all ' . $node_type . ' paths (set above)',
//	    ),
//	  1 => array(
//	    '#type' => 'textfield',
//	    '#title' => 'Multialias pattern(s) for ' . $node_type . ' paths',
//	    ),
//	  2 => array(
//	    '#type' => 'textfield'
//	    )
//	  );
//	  
//	}
//	// dsm($form);
//	// TODO - fill in the replacement patterns available 
//	$form['multialias_nodes']['token_help'] = array(
//    '#title' => t('Replacement patterns'),
//    '#type' => 'fieldset',
//    '#collapsible' => TRUE,
//    '#collapsed' => TRUE,
//    '#description' => t('Use -raw replacements for text to avoid problems with HTML entities.'),
//  );
//  }
//  //print_r($form);
//}

/*
* @JRW
* multialias_submit_handler 
* 
*/
function multialias_submit_handler($form, &$form_state) {
  //Put code here to actually read the variables from the form and submit them as an array
  //into the variables table
}

/*
* @JRW
* multialias_nodeapi 
* Creates the Aliases in the database when the node is saved
*/
function multialias_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch($op) {
    case 'prepare':
      //Turn off pathauto, disabling this for now, I want to work with pathauto
      //$node->pathauto_perform_alias = 0;
    break;
	
	  case 'insert':
	  break;
	    
	  case 'update':
	  break;
	    
	  case 'view':
	  break;
	    
    default:
    break;
		
  }
}

/**
 * Implementation of hook_menu().
 *
 * Hook menu registers page callbacks with Drupal's central menu system.
 * Generate MultiAlias setting menu
 *
 */
function multialias_menu() {
  $items = array();
  
  $items['admin/settings/multialias'] = array(
    'title' => 'Multialias settings',
    'description' => 'Configuration options for the multialias module',
    'page callback' => 'multialias_admin_settings',
    'access callback' => 'user_access', // TRUE will give access to everyone
    'access arguments' => array('admin multialias url aliases'),
  );
  
  return $items;
}

/**
 * Page callback function for admin/settings/multialias.
 */
function multialias_admin_settings() {
  return drupal_get_form('multialias_settings_form');
}

/**
 * Form builder function for multialias_settings_form.
 */
function multialias_settings_form() {
  $form = array();
  $form['multialias_nodes'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('MultiAlias Node Paths'),
	  '#tree' => TRUE,
	  '#collapsed' => 0,
	  '#collapsible' => 0
	);
  //Loop through each content type	
  foreach (node_get_types('names') as $node_type => $node_name) {
  	  //get the current pathauto pattern for the content type
  	  $node_pathauto_pattern = variable_get("pathauto_node_" . $node_type . "_pattern", NULL);
  	  
  	  if(!$node_pathauto_pattern){
  	    $node_pathauto_pattern = variable_get("pathauto_node_pattern", NULL);
  	  }
  	  
  	  //Build the form
  	  $form['multialias_nodes'][$node_type . '_multialias_field'] = array(
	  '#description' => 'test',
	  0 => array(
	    '#type' => 'textfield',
	    '#title' => 'Current pattern for all ' . $node_type . ' paths (set in Pathauto)',
	    '#value' => $node_pathauto_pattern,
	    '#disabled' => 1,
	    ),
  	  );
	  $form['multialias_nodes'][$node_type . 'stalker_threshold'] = array(
	    '#type' => 'textarea',
	    '#title' => t('Multialiases - one per line please'),
	    '#description' => t('Enter in as many aliases as you like one per line you can use the replacement pattens below'),
	    '#default_value' => '',
	    '#required' => FALSE,
	  );
  }
  // dsm($form);
	// TODO - fill in the replacement patterns available 
	$form['multialias_nodes']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Use -raw replacements for text to avoid problems with HTML entities.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  
  return $form;
}

/**
 * Validation function for multialias_admin_settings.
 */
function multialias_settings_form_validate(&$form, &$form_state) {
  // DO FORM VALIDATION !!!!!!
}

/**
 * Submission function for multialias_admin_settings.
 */
function multialias_settings_form_submit(&$form, &$form_state) {
  // DO STUFF !!!!
}